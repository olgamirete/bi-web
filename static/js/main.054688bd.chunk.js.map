{"version":3,"sources":["customHooks/useControls.js","customHooks/useCards.js","customHooks/useData.js","components/controls/Controls.js","components/side-panel/components/fields-list/FieldsList.js","components/side-panel/SidePanel.js","components/dashboard-content/components/meta-card/MetaCard.js","components/dashboard-content/customHooks/useDashboardEventHandlers.js","components/dashboard-content/components/selection-rectangle/SelectionRectangle.js","components/dashboard-content/components/grid/Grid.js","components/dashboard-content/DashboardContent.js","App.js","serviceWorker.js","index.js"],"names":["useControls","useState","flagShowSidePanel","setFlagShowSidePanel","flagSnapToGrid","setFlagSnapToGrid","flagDisplayGrid","setFlagDisplayGrid","toggleSnapToGrid","useCallback","e","toggleDisplayGrid","showSidePanel","snapToGrid","displayGrid","toggleSidePanel","DEFAULT_SIZE","width","GRID_UNIT_WIDTH","height","GRID_UNIT_HEIGHT","useCards","controlFlags","Map","cards","setCards","nextCardIndex","setNextCardIndex","cardMethods","add","startingPos","startingSize","undefined","newCards","cardId","set","id","pos","size","propsBeforeChange","selected","flags","allowResize","allowMove","prevState","move","newPos","newPosControlled","left","Math","round","top","prevCard","get","translateSelected","translation","forEach","card","posBeforeMove","x","y","resize","mouseTranslation","anchor","prevSize","prevPos","nextPos","right","min","bottom","nextPosControlled","nextSize","max","nextWidthControlled","nextHeightControlled","nextSizeControlled","__updatePropsBeforeChange","isSelected","has","Error","toggleSelect","clearSelection","delete","deleteSelected","selectWithRectangle","rectangleProps","flagSelect","cardPos","cardSize","rectProps","rectPos","rectSize","insideX","insideY","isCardInsideSelectionRect","useData","dataStructure","fields","Controls","props","className","onClick","controlMethods","alt","onPointerDown","dashboard","document","getElementById","alert","scrollWidth","scrollHeight","FieldsList","flagExpanded","setFlagExpanded","onPointerUp","target","innerHTML","tableStructure","map","field","i","arr","key","SidePanel","activeSection","setActiveSection","handlePointerDown","selectedSection","dataset","section","parentNode","data-section","Array","from","values","MetaCard","cardInfo","dashboardFlags","overrideHoverPointers","style","backgroundColor","color","data-anchor","useDashboardEventHandlers","dashboardId","setAllowResize","setAllowMove","lastClickedPos","setLastClickedPos","setAnchor","lastContainerClicked","setLastContainerClicked","flagOverrideHoverPointers","setFlagOverrideHoverPointers","lockCtrlKey","setLockCtrlKey","flagDraw","selectionRectangleProps","setSelectionRectangleProps","flagPointerDown","setFlagPointerDown","dashboardScrollSize","setDashboardScrollSize","setBorderCursorGlobalClass","isBorder","isCorner","isHorizontal","cursorClass","join","setProperty","clearBorderCursorGlobalClass","removeProperty","containedInCardContainer","element","a","classList","includes","parentElement","useEffect","preventDefault","pageX","pageY","cardContainer","shiftKey","classesTargetElement","isHor","leftClasses","isLeft","some","el","topClasses","newAnchor","ctrlKey","dashboardRect","getBoundingClientRect","scrollLeft","scrollTop","addEventListener","removeEventListener","useLayoutEffect","handlePointerMove","priorizeX","abs","restrictedTranslation","resizeTranslation","newSelectionRectangleProps","console","log","handlePointerUp","handleKeyDown","handleKeyUp","window","debugInfo","JSON","stringify","scrollSize","SelectionRectangle","selRectInfo","Grid","DashboardContent","dashboardRef","useRef","dashboardProps","ref","App","data","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.054688bd.chunk.js","sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nfunction useControls() {\r\n\r\n  const [flagShowSidePanel, setFlagShowSidePanel] = useState(true);\r\n  const [flagSnapToGrid, setFlagSnapToGrid] = useState(false);\r\n  const [flagDisplayGrid, setFlagDisplayGrid] = useState(true);\r\n  // const [lockGridSetting, setLockGridSetting] = useState(false);\r\n\r\n  const toggleSidePanel = () => {\r\n    setFlagShowSidePanel(!flagShowSidePanel);\r\n  }\r\n\r\n  const toggleSnapToGrid = useCallback((e) => {\r\n    setFlagSnapToGrid(!flagSnapToGrid);\r\n  }, [flagSnapToGrid]);\r\n\r\n  const toggleDisplayGrid = useCallback((e) => {\r\n    setFlagDisplayGrid(!flagDisplayGrid);\r\n  }, [flagDisplayGrid]);\r\n\r\n\r\n  // // Handle Alt key press and release.------------------------------------------\r\n  // useEffect(() => {\r\n  //   if (keyboardInfo.altPressed === true) {\r\n  //     if (lockGridSetting === false) {\r\n  //       setLockGridSetting(true);\r\n  //       toggleSnapToGrid();\r\n  //     }\r\n  //   } else {\r\n  //     if (lockGridSetting === true) {\r\n  //       setLockGridSetting(false);\r\n  //       toggleSnapToGrid();\r\n  //     }\r\n  //   }\r\n  // }, [keyboardInfo.altPressed, lockGridSetting, toggleSnapToGrid]);\r\n  // // ---------------------------------------------------------------------------\r\n\r\n\r\n\r\n  const controlFlags = {\r\n    showSidePanel: flagShowSidePanel,\r\n    snapToGrid: flagSnapToGrid,\r\n    displayGrid: flagDisplayGrid\r\n  };\r\n  const controlMethods = {\r\n    setFlagShowSidePanel: setFlagShowSidePanel,\r\n    toggleSidePanel: toggleSidePanel,\r\n    toggleSnapToGrid: toggleSnapToGrid,\r\n    toggleDisplayGrid: toggleDisplayGrid\r\n  };\r\n\r\n  return [controlFlags, controlMethods];\r\n}\r\n\r\nexport default useControls;","import { useState } from 'react';\r\n\r\nconst GRID_UNIT_WIDTH = 20;\r\nconst GRID_UNIT_HEIGHT = 20;\r\n\r\nconst MIN_WIDHT = GRID_UNIT_WIDTH * 2;\r\nconst MIN_HEIGHT = GRID_UNIT_HEIGHT * 2;\r\nconst DEFAULT_WIDTH = GRID_UNIT_WIDTH * 3 * 2;\r\nconst DEFAULT_HEIGHT = GRID_UNIT_HEIGHT * 3 * 3;\r\nconst DEFAULT_SIZE = { width: DEFAULT_WIDTH, height: DEFAULT_HEIGHT };\r\n\r\nfunction useCards(controlFlags) {\r\n\r\n\r\n  const [cards, setCards] = useState(new Map());\r\n  const [nextCardIndex, setNextCardIndex] = useState(0);\r\n\r\n  function moveCard(cardId, newPos) {\r\n    const newPosControlled = {\r\n      left: controlFlags.snapToGrid ? Math.round(newPos.left / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : newPos.left,\r\n      top: controlFlags.snapToGrid ? Math.round(newPos.top / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : newPos.top\r\n    }\r\n    setCards(cards => {\r\n      const prevCard = cards.get(cardId);\r\n      let newCards = new Map(cards);\r\n      newCards.set(cardId, {\r\n        id: prevCard.id,\r\n        pos: newPosControlled,\r\n        size: prevCard.size,\r\n        propsBeforeChange: prevCard.propsBeforeChange,\r\n        selected: prevCard.selected,\r\n        flags: prevCard.flags\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function translateSelectedCards(translation) {\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      newCards.forEach(card => {\r\n        if (card.selected === true) {\r\n          const posBeforeMove = card.propsBeforeChange.pos;\r\n          const newPos = {\r\n            left: posBeforeMove.left + translation.x,\r\n            top: posBeforeMove.top + translation.y\r\n          };\r\n          const newPosControlled = {\r\n            left: controlFlags.snapToGrid ? Math.round(newPos.left / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : newPos.left,\r\n            top: controlFlags.snapToGrid ? Math.round(newPos.top / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : newPos.top\r\n          }\r\n          newCards.set(card.id, {\r\n            id: card.id,\r\n            pos: newPosControlled,\r\n            size: card.size,\r\n            propsBeforeChange: card.propsBeforeChange,\r\n            selected: card.selected,\r\n            flags: card.flags\r\n          });\r\n        }\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function resizeCard(cardId, mouseTranslation, allowResize, anchor) {\r\n    setCards(cards => {\r\n      const prevCard = cards.get(cardId);\r\n      const prevSize = prevCard.propsBeforeChange.size;\r\n      const prevPos = prevCard.propsBeforeChange.pos;\r\n\r\n      const nextPos = {\r\n        left: anchor.right ? Math.min(prevPos.left + mouseTranslation.x, prevPos.left + prevSize.width - MIN_WIDHT) : prevPos.left,\r\n        top: anchor.bottom ? Math.min(prevPos.top + mouseTranslation.y, prevPos.top + prevSize.height - MIN_HEIGHT) : prevPos.top\r\n      }\r\n      const nextPosControlled = {\r\n        left: controlFlags.snapToGrid && anchor.right && allowResize.width ? Math.round(nextPos.left / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : nextPos.left,\r\n        top: controlFlags.snapToGrid && anchor.bottom && allowResize.height ? Math.round(nextPos.top / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : nextPos.top\r\n      }\r\n\r\n      const nextSize = {\r\n        width: Math.max(prevSize.width + mouseTranslation.x * (anchor.right ? -1 : 1), MIN_WIDHT),\r\n        height: Math.max(prevSize.height + mouseTranslation.y * (anchor.bottom ? -1 : 1), MIN_HEIGHT)\r\n      }\r\n      let nextWidthControlled = nextSize.width;\r\n      let nextHeightControlled = nextSize.height;\r\n      if (controlFlags.snapToGrid) {\r\n        if (allowResize.width) {\r\n          nextWidthControlled = anchor.right ? prevSize.width - (nextPosControlled.left - prevPos.left) : Math.round((prevPos.left + nextSize.width) / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH - prevPos.left;\r\n        }\r\n        if (allowResize.height) {\r\n          nextHeightControlled = anchor.bottom ? prevSize.height - (nextPosControlled.top - prevPos.top) : Math.round((prevPos.top + nextSize.height) / GRID_UNIT_HEIGHT, 0) * GRID_UNIT_HEIGHT - prevPos.top;\r\n        }\r\n      }\r\n      // const nextSizeControlled = {\r\n      //   width: controlFlags.snapToGrid && (anchor.right === false) && allowResize.width ? Math.round(nextSize.width / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : nextSize.width,\r\n      //   height: controlFlags.snapToGrid && (anchor.bottom === false) && allowResize.height ? Math.round(nextSize.height / GRID_UNIT_WIDTH, 0) * GRID_UNIT_WIDTH : nextSize.height\r\n      // }\r\n      const nextSizeControlled = {\r\n        width: nextWidthControlled,\r\n        height: nextHeightControlled\r\n      }\r\n\r\n\r\n      let newCards = new Map(cards);\r\n      newCards.set(cardId, {\r\n        id: prevCard.id,\r\n        pos: nextPosControlled,\r\n        size: nextSizeControlled,\r\n        propsBeforeChange: prevCard.propsBeforeChange,\r\n        selected: prevCard.selected,\r\n        flags: prevCard.flags\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function toggleCardSelection(cardId) {\r\n    setCards(cards => {\r\n      const prevCard = cards.get(cardId);\r\n      let newCards = new Map(cards);\r\n      newCards.set(cardId, {\r\n        id: prevCard.id,\r\n        pos: prevCard.pos,\r\n        size: prevCard.size,\r\n        propsBeforeChange: prevCard.propsBeforeChange,\r\n        selected: !prevCard.selected,\r\n        flags: prevCard.flags\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  const addNewCard = (startingPos, startingSize) => {\r\n    if (startingSize === undefined) {\r\n      startingSize = DEFAULT_SIZE;\r\n    }\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      const cardId = \"card-\" + nextCardIndex;\r\n      newCards.set(cardId, {\r\n        id: cardId,\r\n        pos: startingPos,\r\n        size: startingSize,\r\n        propsBeforeChange: {\r\n          pos: startingPos,\r\n          size: startingSize\r\n        },\r\n        selected: false,\r\n        flags: {\r\n          allowResize: {\r\n            width: false,\r\n            height: false\r\n          },\r\n          allowMove: false\r\n        }\r\n      });\r\n      return newCards;\r\n    });\r\n    setNextCardIndex((prevState) => prevState + 1);\r\n  }\r\n\r\n  function deleteCard(cardId) {\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      newCards.delete(cardId);\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function deleteSelectedCards() {\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      newCards.forEach(card => {\r\n        if (card.selected === true) {\r\n          newCards.delete(card.id);\r\n        }\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function __updatePropsBeforeChange() {\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      newCards.forEach(card => {\r\n        newCards.set(card.id, {\r\n          id: card.id,\r\n          pos: card.pos,\r\n          size: card.size,\r\n          propsBeforeChange: {\r\n            pos: card.pos,\r\n            size: card.size\r\n          },\r\n          selected: card.selected,\r\n          flags: card.flags\r\n        });\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function clearSelection() {\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      newCards.forEach(card => {\r\n        if (card.selected === true) {\r\n          newCards.set(card.id, {\r\n            id: card.id,\r\n            pos: card.pos,\r\n            size: card.size,\r\n            propsBeforeChange: card.propsBeforeChange,\r\n            selected: false,\r\n            flags: card.flags\r\n          });\r\n        }\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  function isCardSelected(cardId) {\r\n    if (cards.has(cardId) === true) {\r\n      return cards.get(cardId).selected;\r\n    } else {\r\n      return Error(\"cardId does not exist.\");\r\n    }\r\n  }\r\n\r\n  function isCardInsideSelectionRect(cardPos, cardSize, rectProps) {\r\n    const rectPos = rectProps.pos;\r\n    const rectSize = rectProps.size;\r\n    const insideX = (cardPos.left >= rectPos.left) && (cardPos.left + cardSize.width <= rectPos.left + rectSize.width);\r\n    const insideY = (cardPos.top >= rectPos.top) && (cardPos.top + cardSize.height <= rectPos.top + rectSize.height);\r\n    return insideX && insideY;\r\n  }\r\n\r\n  function selectWithRectangle(rectangleProps) {\r\n    setCards(cards => {\r\n      let newCards = new Map(cards);\r\n      newCards.forEach(card => {\r\n        const flagSelect = isCardInsideSelectionRect(card.pos, card.size, rectangleProps);\r\n        newCards.set(card.id, {\r\n          id: card.id,\r\n          pos: card.pos,\r\n          size: card.size,\r\n          propsBeforeChange: card.propsBeforeChange,\r\n          selected: flagSelect,\r\n          flags: card.flags\r\n        });\r\n      });\r\n      return newCards;\r\n    });\r\n  }\r\n\r\n  const cardMethods = {\r\n    add: addNewCard,\r\n    move: moveCard,\r\n    translateSelected: translateSelectedCards,\r\n    resize: resizeCard,\r\n    __updatePropsBeforeChange: __updatePropsBeforeChange,\r\n    isSelected: isCardSelected,\r\n    toggleSelect: toggleCardSelection,\r\n    clearSelection: clearSelection,\r\n    delete: deleteCard,\r\n    deleteSelected: deleteSelectedCards,\r\n    selectWithRectangle: selectWithRectangle\r\n  }\r\n\r\n  return [cards, cardMethods];\r\n}\r\nexport default useCards;","function useData() {\r\n\r\n    const fieldsTable1 = [\"anio\", \"nombre\", \"cantidad\"];\r\n    const fieldsTable2 = [\"dni\", \"provincia\", \"edad\"];\r\n    const fieldsTable3 = [\"fruta\", \"calorías\"];\r\n\r\n\r\n    const dataStructure = new Map();\r\n    dataStructure.set(\"table1\", {id: \"table1\", fields: fieldsTable1});\r\n    dataStructure.set(\"table2\", {id: \"table2\", fields: fieldsTable2});\r\n    dataStructure.set(\"table3\", {id: \"table3\", fields: fieldsTable3});\r\n\r\n    const data = null;\r\n\r\n    return [dataStructure, data];\r\n}\r\n\r\nexport default useData;","import React from 'react';\r\nimport './Controls.css';\r\n\r\nfunction Controls(props) {\r\n  const testFunc = (e) => {\r\n    const dashboard = document.getElementById(\"dashboard-content\");\r\n    // const dashboardRect = dashboard.getBoundingClientRect();\r\n    // alert(JSON.stringify(dashboardRect));\r\n    alert(dashboard.scrollWidth + \" - \" + dashboard.scrollHeight);\r\n  }\r\n  return (\r\n    <div className=\"controls\">\r\n      <button\r\n        onClick={props.controlMethods.toggleSidePanel}>Toggle menu</button>\r\n      <button\r\n        alt=\"Toggle snap to grid\"\r\n        className={props.controlFlags.snapToGrid ? \"active\" : \"\"}\r\n        onPointerDown={props.controlMethods.toggleSnapToGrid}>\r\n        Snap to grid\r\n      </button>\r\n      <button\r\n        alt=\"Toggle display grid\"\r\n        className={props.controlFlags.displayGrid ? \"active\" : \"\"}\r\n        onPointerDown={props.controlMethods.toggleDisplayGrid}>\r\n        Display grid\r\n      </button>\r\n      <button\r\n        onClick={() => props.cardMethods.add({ left: 100, top: 300 })}>+</button>\r\n      <button\r\n        onClick={testFunc}>Test</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;","import React, { useState } from 'react';\r\nimport './FieldsList.css';\r\n\r\nfunction FieldsList(props) {\r\n\r\n  const [flagExpanded, setFlagExpanded] = useState(false);\r\n\r\n  const toggleExpand = (e) => {\r\n    e.target.innerHTML = flagExpanded ? \"+\" : \"-\";\r\n    setFlagExpanded(!flagExpanded);\r\n  }\r\n\r\n  return (\r\n    <section className=\"table-fields-section\">\r\n      <div className=\"container-button-and-title\">\r\n        <button\r\n          className=\"button-expand-collapse\"\r\n          onPointerUp={toggleExpand}>+</button>\r\n        <h4\r\n          id={props.tableStructure.id}\r\n          className=\"fields-table-name\">\r\n          {props.tableStructure.id}\r\n        </h4>\r\n      </div>\r\n      <ul className={\"fields-list\" + (flagExpanded ? \"\" : \" hidden\")}>\r\n        {\r\n          props.tableStructure.fields.map((field, i, arr) => {\r\n            return (\r\n              <li\r\n                key={i}\r\n                id={\"table-\" + props.tableStructure.id + \"-field-\" + field}\r\n                className=\"field-item\">\r\n                {field}\r\n              </li>\r\n            );\r\n          })\r\n        }\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default FieldsList;","import React, { useState } from 'react';\r\nimport './SidePanel.css';\r\nimport FieldsList from './components/fields-list/FieldsList.js';\r\n\r\nfunction SidePanel(props) {\r\n\r\n  const [activeSection, setActiveSection] = useState(\"fields\");\r\n  \r\n  const handlePointerDown = (e) => {\r\n    let selectedSection = e.target.dataset.section;\r\n    if (selectedSection === undefined) {\r\n      selectedSection = e.target.parentNode.dataset.section;\r\n    }\r\n    if(activeSection !== selectedSection) {\r\n      setActiveSection(selectedSection);\r\n      props.controlMethods.setFlagShowSidePanel(true);\r\n    } else {\r\n      props.controlMethods.toggleSidePanel();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={\"side-panel\" + (props.controlFlags.showSidePanel ? \"\" : \" hide\")}>\r\n\r\n      <div className=\"buttons-container\">\r\n        <button\r\n          data-section=\"fields\"\r\n          className={activeSection === \"fields\" ? \"active\" : \"\"}\r\n          onPointerDown={handlePointerDown}>\r\n          <span className=\"text\">Fields</span>\r\n        </button>\r\n        <button\r\n          data-section=\"format\"\r\n          className={activeSection === \"format\" ? \"active\" : \"\"}\r\n          onPointerDown={handlePointerDown}>\r\n          <span className=\"text\">Format</span>\r\n        </button>\r\n        <button\r\n          data-section=\"other\"\r\n          className={activeSection === \"other\" ? \"active\" : \"\"}\r\n          onPointerDown={handlePointerDown}>\r\n          <span className=\"text\">Other</span>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"sections-container\">\r\n        <section className={\"section\" + (activeSection === \"fields\" ? \" active\" : \"\")}>\r\n          <h3 className=\"title\">Fields</h3>\r\n          {\r\n            Array.from(props.dataStructure.values()).map((tableStructure, i, arr) => {\r\n              return <FieldsList key={i} tableStructure={tableStructure} />\r\n            })\r\n          }\r\n        </section>\r\n        <section className={\"section\" + (activeSection === \"format\" ? \" active\" : \"\")}>\r\n          <h3 className=\"title\">Format</h3>\r\n          Format options\r\n        </section>\r\n        <section className={\"section\" + (activeSection === \"other\" ? \" active\" : \"\")}>\r\n          <h3 className=\"title\">Other</h3>\r\n          Other\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidePanel;","import React from 'react';\r\nimport './MetaCard.css';\r\n\r\nfunction MetaCard(props) {\r\n\r\n  const selected = props.cardInfo.selected;\r\n\r\n  return (\r\n    <div\r\n      id={props.cardInfo.id}\r\n      className={\"resizeable-card-container\" + (selected ? \" selected\" : \"\") + (props.controlFlags.snapToGrid ? \" animate-all\" : \"\" ) + (props.dashboardFlags.overrideHoverPointers ? \" unset-cursors\" : \"\")}\r\n      style={{\r\n        left: props.cardInfo.pos.left + \"px\",\r\n        top: props.cardInfo.pos.top + \"px\",\r\n        backgroundColor: props.color\r\n      }}>\r\n      <div className=\"col-container\">\r\n        <div className=\"corner nw\" data-anchor={{ right: true, bottom: true }}></div>\r\n        <div className=\"border vertical left\" data-anchor={{ right: true, bottom: false }}></div>\r\n        <div className=\"corner sw\" data-anchor={{ right: true, bottom: false }}></div>\r\n      </div>\r\n\r\n      <div className=\"col-container\">\r\n        <div className=\"border horizontal top\" data-anchor={{ right: false, bottom: true }}></div>\r\n\r\n        {/* {props.children} */}\r\n        <div\r\n          className=\"content\"\r\n          style={{\r\n            width: props.cardInfo.size.width + \"px\",\r\n            height: props.cardInfo.size.height + \"px\"\r\n          }}>\r\n          {/* {\"Debug info: \" + debugInfo} */}\r\n          {/* {\"controller index: \" + controllerPointerIndex} */}\r\n        </div>\r\n        <div className=\"border horizontal bottom\" data-anchor={{ right: false, bottom: false }}></div>\r\n      </div>\r\n\r\n      <div className=\"col-container\">\r\n        <div className=\"corner ne\" data-anchor={{ right: false, bottom: true }}></div>\r\n        <div className=\"border vertical right\" data-anchor={{ right: false, bottom: false }}></div>\r\n        <div className=\"corner se\" data-anchor={{ right: false, bottom: false }}></div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MetaCard;","import { useEffect, useState, useCallback, useLayoutEffect } from 'react';\r\n\r\nfunction useDashboardEventHandlers(dashboardId, cardMethods, controlMethods) {\r\n\r\n  // const cardContainer = document.getElementById(carId);\r\n\r\n\r\n  const [allowResize, setAllowResize] = useState({ width: false, height: false });\r\n  const [allowMove, setAllowMove] = useState(false);\r\n\r\n  const [lastClickedPos, setLastClickedPos] = useState({ x: 0, y: 0 });\r\n  const [anchor, setAnchor] = useState({ right: false, bottom: false });\r\n  const [lastContainerClicked, setLastContainerClicked] = useState(null);\r\n  const [flagOverrideHoverPointers, setFlagOverrideHoverPointers] = useState(false);\r\n  const [lockCtrlKey, setLockCtrlKey] = useState(false);\r\n  const [selectionRectangleProps, setSelectionRectangleProps] = useState({\r\n    flagDraw: false,\r\n    pos: { left: 0, top: 0 },\r\n    size: { width: 0, height: 0 }\r\n  });\r\n  const [flagPointerDown, setFlagPointerDown] = useState(false);\r\n  const [dashboardScrollSize, setDashboardScrollSize] = useState({\r\n    width: \"100%\",\r\n    height: \"100%\"\r\n  })\r\n\r\n  // const dashboard = useMemo(() => {\r\n  //   return document.getElementById(dashboardId);\r\n  // }, [dashboardId]);\r\n\r\n  // Cursor handlers\r\n  const setBorderCursorGlobalClass = useCallback((isBorder, isCorner, isHorizontal, anchor) => {\r\n    let cursorClass = \"\"\r\n    if (isBorder) {\r\n      if (isHorizontal) {\r\n        cursorClass = \"ns-resize\";\r\n      } else {\r\n        cursorClass = \"ew-resize\";\r\n      }\r\n    } else {\r\n      if (isCorner) {// It is a corner\r\n        const anchorsEncoded = [+anchor.right, +anchor.bottom].join(\"\");\r\n        const cornerCursorClassByAnchors = {\r\n          \"00\": \"se-resize\",\r\n          \"01\": \"ne-resize\",\r\n          \"10\": \"sw-resize\",\r\n          \"11\": \"nw-resize\"\r\n        }\r\n        cursorClass = cornerCursorClassByAnchors[anchorsEncoded];\r\n      } else {\r\n        cursorClass = \"normal\";\r\n      }\r\n    }\r\n    const dashboard = document.getElementById(dashboardId);\r\n    dashboard.style.setProperty(\"cursor\", cursorClass);\r\n  }, [dashboardId]);\r\n\r\n  const clearBorderCursorGlobalClass = useCallback(() => {\r\n    const dashboard = document.getElementById(dashboardId);\r\n    dashboard.style.removeProperty(\"cursor\");\r\n  }, [dashboardId]);\r\n\r\n  const containedInCardContainer = useCallback((element) => {\r\n    let a = element;\r\n    while (a) {\r\n      if (Array.from(a.classList).includes(\"resizeable-card-container\")) {\r\n        return a;\r\n      } else {\r\n        a = a.parentElement;\r\n      }\r\n    }\r\n    return null;\r\n  }, []);\r\n  // ---------------------------------------------------------------------------\r\n\r\n  // Pointer down\r\n  useEffect(() => {\r\n    const dashboard = document.getElementById(dashboardId);\r\n    const handlePointerDown = (e) => {\r\n      e.preventDefault();\r\n      setFlagPointerDown(true);\r\n      setLastClickedPos({ x: e.pageX, y: e.pageY });\r\n\r\n      // Did the user click on a card? If so, the function returns the card\r\n      // container element. If not, \"false\" is returned instead.\r\n      const cardContainer = containedInCardContainer(e.target);\r\n\r\n      if (cardContainer !== null) {\r\n\r\n        cardMethods.__updatePropsBeforeChange();\r\n        setLastContainerClicked(cardContainer);\r\n\r\n        const cardId = cardContainer.id;\r\n\r\n        if (e.shiftKey === true) {\r\n          cardMethods.toggleSelect(cardId);\r\n        } else {\r\n\r\n          // If not currently selected, clear previous selection and select the\r\n          // clicked card.\r\n          if (cardMethods.isSelected(cardId) === false) {\r\n            cardMethods.clearSelection();\r\n            cardMethods.toggleSelect(cardId);\r\n          }\r\n\r\n          const classesTargetElement = Array.from(e.target.classList);\r\n          const isBorder = classesTargetElement.includes(\"border\");\r\n          const isCorner = classesTargetElement.includes(\"corner\");\r\n\r\n          if (isBorder || isCorner) {\r\n\r\n            const isHor = classesTargetElement.includes(\"horizontal\");\r\n            // const isVer = classesTargetElement.includes(\"vertical\");\r\n\r\n            const leftClasses = [\"left\", \"nw\", \"sw\"];\r\n            const isLeft = classesTargetElement.some((el) => leftClasses.includes(el));\r\n\r\n            const topClasses = [\"top\", \"nw\", \"ne\"];\r\n            const isTop = classesTargetElement.some((el) => topClasses.includes(el));\r\n\r\n            const newAnchor = {\r\n              right: isLeft,\r\n              bottom: isTop\r\n            }\r\n            setAnchor(newAnchor);\r\n\r\n            setAllowResize({\r\n              width: !isHor || isCorner,\r\n              height: isHor || isCorner\r\n            });\r\n\r\n            setBorderCursorGlobalClass(isBorder, isCorner, isHor, newAnchor);\r\n            setFlagOverrideHoverPointers(true);\r\n\r\n          } else {\r\n            setAllowMove(true);\r\n          }\r\n        }\r\n      } else {\r\n        if (e.ctrlKey === true) {\r\n          const dashboardRect = dashboard.getBoundingClientRect();\r\n          cardMethods.add({\r\n            left: e.pageX - dashboardRect.left+dashboard.scrollLeft,\r\n            top: e.pageY - dashboardRect.top+dashboard.scrollTop\r\n          });\r\n        } else {\r\n          // If no card was clicked, and if the ctrl key was not pressed, we can\r\n          // clear the selection.\r\n          cardMethods.clearSelection();\r\n        }\r\n      }\r\n    }\r\n    dashboard.addEventListener(\"pointerdown\", handlePointerDown, false);\r\n    return () => dashboard.removeEventListener(\"pointerdown\", handlePointerDown, false);\r\n  }, [\r\n    cardMethods, // Ok?\r\n    dashboardId, // Ok\r\n    setBorderCursorGlobalClass, // Ok?\r\n    containedInCardContainer // Ok\r\n  ]);\r\n\r\n  // Pointer move\r\n  useLayoutEffect(() => {\r\n\r\n    const dashboard = document.getElementById(dashboardId);\r\n\r\n    const handlePointerMove = (e) => {\r\n      const translation = {\r\n        x: e.pageX - lastClickedPos.x,\r\n        y: e.pageY - lastClickedPos.y\r\n      }\r\n\r\n      if (allowMove) {\r\n\r\n        if (e.shiftKey === false) {\r\n          cardMethods.translateSelected(translation);\r\n        } else {\r\n          const priorizeX = Math.abs(translation.x) > Math.abs(translation.y);\r\n          const priorizeY = !priorizeX;\r\n\r\n          const restrictedTranslation = {\r\n            x: priorizeX ? translation.x : 0,\r\n            y: priorizeY ? translation.y : 0\r\n          }\r\n          cardMethods.translateSelected(restrictedTranslation);\r\n        }\r\n      } else {\r\n        if (allowResize.width || allowResize.height) {\r\n\r\n          const resizeTranslation = {\r\n            x: allowResize.width ? translation.x : 0,\r\n            y: allowResize.height ? translation.y : 0\r\n          };\r\n          cardMethods.resize(lastContainerClicked.id, resizeTranslation, allowResize, anchor);\r\n        } else {\r\n          if (flagPointerDown) {\r\n            const dashboardRect = dashboard.getBoundingClientRect();\r\n            const newSelectionRectangleProps = {\r\n              flagDraw: true,\r\n              pos: {\r\n                left: Math.min(lastClickedPos.x, e.pageX) - dashboardRect.left+dashboard.scrollLeft,\r\n                top: Math.min(lastClickedPos.y, e.pageY) - dashboardRect.top+dashboard.scrollTop\r\n              },\r\n              size: {\r\n                width: Math.abs(e.pageX - lastClickedPos.x),\r\n                height: Math.abs(e.pageY - lastClickedPos.y)\r\n              }\r\n            };\r\n            // console.log(JSON.stringify(e.offsetX + \"-\" + e.offsetY));\r\n            setSelectionRectangleProps(newSelectionRectangleProps);\r\n            cardMethods.selectWithRectangle(newSelectionRectangleProps);\r\n          }\r\n        }\r\n      }\r\n      if (allowMove || allowResize.width || allowResize.height) {\r\n        console.log(\"ran\");\r\n        setDashboardScrollSize({\r\n          width: dashboard.scrollWidth,\r\n          height: dashboard.scrollHeight\r\n        });\r\n      }\r\n    }\r\n    dashboard.addEventListener(\"pointermove\", handlePointerMove, false);\r\n    return () => dashboard.removeEventListener(\"pointermove\", handlePointerMove, false);\r\n  }, [\r\n    cardMethods, // ok?\r\n    dashboardId, // ok\r\n    allowMove, // ok\r\n    allowResize, // ok\r\n    anchor, // ok\r\n    lastClickedPos, // ok\r\n    lastContainerClicked, // ok\r\n    flagPointerDown // ok\r\n  ]);\r\n\r\n  // Pointer up\r\n  useEffect(() => {\r\n    const dashboard = document.getElementById(dashboardId);\r\n    const handlePointerUp = (e) => {\r\n      // e.preventDefault();\r\n      // Disallow both movement and resizing.\r\n      setFlagPointerDown(false);\r\n      setAllowResize({ width: false, height: false });\r\n      setAllowMove(false);\r\n      clearBorderCursorGlobalClass();\r\n      setFlagOverrideHoverPointers(false);\r\n      setSelectionRectangleProps({\r\n        flagDraw: false,\r\n        pos: { left: 0, top: 0 },\r\n        size: { width: 0, height: 0 }\r\n      });\r\n    }\r\n    dashboard.addEventListener(\"pointerup\", handlePointerUp, false);\r\n    return () => dashboard.removeEventListener(\"pointerup\", handlePointerUp, false);\r\n  }, [cardMethods, dashboardId, clearBorderCursorGlobalClass]);\r\n\r\n  // Key down\r\n  useEffect(() => {\r\n\r\n    const handleKeyDown = (e) => {\r\n      switch (e.key) {\r\n        case \"Escape\":\r\n          cardMethods.clearSelection();\r\n          break;\r\n        case \"Delete\":\r\n          cardMethods.deleteSelected();\r\n          break;\r\n        case \"Control\":\r\n          if (!lockCtrlKey) {\r\n            controlMethods.toggleSnapToGrid();\r\n            setLockCtrlKey(true);\r\n          }\r\n          break;\r\n        case \"Backspace\":\r\n          cardMethods.deleteSelected();\r\n          break;\r\n        default:\r\n          // alert(keyboardInfo.lastKeyPressed);\r\n          break;\r\n      }\r\n    }\r\n\r\n    const handleKeyUp = (e) => {\r\n      switch (e.key) {\r\n        case \"Escape\":\r\n          break;\r\n        case \"Delete\":\r\n          break;\r\n        case \"Control\":\r\n          controlMethods.toggleSnapToGrid();\r\n          setLockCtrlKey(false);\r\n          break;\r\n        case \"Backspace\":\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown, false);\r\n    window.addEventListener(\"keyup\", handleKeyUp, false);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown, false);\r\n      window.removeEventListener(\"keyup\", handleKeyUp, false);\r\n    }\r\n\r\n  }, [cardMethods, controlMethods, lockCtrlKey]);\r\n\r\n  // const handlers = {\r\n  //   pointerDown: handlePointerDown,\r\n  //   pointerMove: handlePointerMove,\r\n  //   pointerUp: handlePointerUp\r\n  // }\r\n\r\n  // const scrollSize = useMemo(() => {\r\n  //   // const dashboard = document.getElementById(dashboardId);\r\n  //   const scrollWidth = dashboard === null ? 0 : dashboard.scrollWidth;\r\n  //   const scrollHeight = dashboard === null ? 0 : dashboard.scrollHeight;\r\n  //   return {\r\n  //     width: scrollWidth,\r\n  //     height: scrollHeight\r\n  //   }\r\n  // }, [dashboard, dashboard.scrollWidth, dashboard.scrollHeight]);\r\n\r\n  const debugInfo = JSON.stringify({\r\n    allowResize: allowResize,\r\n    allowMove: allowMove,\r\n    lastClickedPos: lastClickedPos,\r\n    anchor: anchor\r\n  });\r\n\r\n  const dashboardFlags = {\r\n    overrideHoverPointers: flagOverrideHoverPointers\r\n  }\r\n  const dashboardProps = {\r\n    debugInfo: debugInfo,\r\n    selectionRectangleProps: selectionRectangleProps,\r\n    scrollSize: dashboardScrollSize\r\n  }\r\n\r\n  return [dashboardFlags, dashboardProps];\r\n}\r\n\r\nexport default useDashboardEventHandlers;","import React from 'react';\r\nimport './SelectionRectangle.css';\r\n\r\nfunction SelectionRectangle(props) {\r\n    // console.log(props.flagDraw);\r\n    return (\r\n        <div\r\n            className={\"selection-rectangle\" + (props.selRectInfo.flagDraw ? \"\" : \" hide\")}\r\n            style={{\r\n                left: props.selRectInfo.pos.left,\r\n                top: props.selRectInfo.pos.top,\r\n                width: props.selRectInfo.size.width,\r\n                height: props.selRectInfo.size.height}}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectionRectangle;","import React from 'react';\r\nimport './Grid.css';\r\n\r\nfunction Grid(props) {\r\n\r\n  // const [dashboardScrollSize, setDashboardScrollSize] = useState({\r\n  //   width: \"100%\",\r\n  //   height: \"100%\"\r\n  // });\r\n\r\n  // const getScrollSize = useCallback(() => {\r\n  //   if (props.dashboardRef.current === null) {\r\n  //     return dashboardScrollSize;\r\n  //   } else {\r\n  //     return {\r\n  //       width: props.dashboardRef.current.scrollWidth,\r\n  //       height: props.dashboardRef.current.scrollHeight\r\n  //     }\r\n  //   }\r\n  // }, [props.dashboardRef, dashboardScrollSize]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   // const dashboard = props.dashboardRef.current;\r\n  //   // const scrollWidth = dashboard === null ? 0 : dashboard.scrollWidth;\r\n  //   // const scrollHeight = dashboard === null ? 0 : dashboard.scrollHeight;\r\n  //   // alert(scrollWidth + \"-\" + scrollHeight);\r\n  //   // alert(JSON.stringify(getScrollSize(dashboard)));\r\n  //   // console.log(JSON.stringify(getScrollSize(dashboard)));\r\n  //   const newScrollSize = getScrollSize();\r\n  //   if(dashboardScrollSize !== newScrollSize){\r\n  //     setDashboardScrollSize(newScrollSize);\r\n  //     console.log(false);\r\n  //   } else {\r\n  //     console.log(true);\r\n  //   }\r\n  //   // alert(\"ran\");\r\n\r\n  // }, [props.dashboardRef, getScrollSize, dashboardScrollSize]);\r\n\r\n  return (\r\n    <div\r\n      className=\"grid\"\r\n      style={{\r\n        width: props.dashboardScrollSize.width,\r\n        height: props.dashboardScrollSize.height\r\n      }}>\r\n      {\r\n        props.controlFlags.displayGrid === true &&\r\n        <span>\r\n          <div\r\n            className=\"small-grid\"></div>\r\n          <div\r\n            className=\"big-grid\"></div>\r\n        </span>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid;","import React, { useRef } from 'react';\r\nimport './DashboardContent.css';\r\nimport MetaCard from './components/meta-card/MetaCard.js';\r\nimport useDashboardEventHandlers from './customHooks/useDashboardEventHandlers.js';\r\nimport SelectionRectangle from './components/selection-rectangle/SelectionRectangle.js';\r\nimport Grid from './components/grid/Grid.js';\r\n\r\nconst DASHBOARD_ID = \"dashboard-content\";\r\n\r\nfunction DashboardContent(props) {\r\n\r\n  const dashboardRef = useRef(null);\r\n\r\n  const [dashboardFlags, dashboardProps] = useDashboardEventHandlers(\r\n    DASHBOARD_ID,\r\n    props.cardMethods,\r\n    props.controlMethods);\r\n\r\n  return (\r\n    <div\r\n      id={DASHBOARD_ID}\r\n      className=\"dashboard-content\"\r\n      ref={dashboardRef}>\r\n      <Grid\r\n        controlFlags={props.controlFlags}\r\n        dashboardRef={dashboardRef}\r\n        dashboardScrollSize={dashboardProps.scrollSize} />\r\n      {/* <span className=\"debug-info\">{dashboardProps.debugInfo}</span> */}\r\n      {/* <span className=\"debug-info\">{JSON.stringify(dashboardProps.scrollSize)}</span> */}\r\n      {\r\n        Array.from(props.cards.values()).map((cardInfo, i, arr) => {\r\n          return <MetaCard\r\n            key={i}\r\n            cardInfo={cardInfo}\r\n            dashboardFlags={dashboardFlags}\r\n            controlFlags={props.controlFlags} />\r\n        })\r\n      }\r\n      <SelectionRectangle selRectInfo={dashboardProps.selectionRectangleProps} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashboardContent;","import React from 'react';\nimport './App.css';\n\n// Custom hooks-----------------------------------------------------------------\nimport useControls from './customHooks/useControls.js';\nimport useCards from './customHooks/useCards.js';\nimport useData from './customHooks/useData.js';\n// -----------------------------------------------------------------------------\n\n// Basic components-------------------------------------------------------------\nimport Controls from './components/controls/Controls.js';\nimport SidePanel from './components/side-panel/SidePanel.js';\nimport DashboardContent from './components/dashboard-content/DashboardContent.js';\n// -----------------------------------------------------------------------------\n\nfunction App() {\n\n  const [controlFlags, controlMethods] = useControls();\n  \n  const [cards, cardMethods] = useCards(controlFlags);\n  const [dataStructure, data] = useData();\n\n  return (\n    <div\n      className=\"App\">\n      \n      <Controls\n        cardMethods={cardMethods}\n        controlFlags={controlFlags}\n        controlMethods={controlMethods} />\n\n      <div className=\"container-for-side-panel-and-content\">\n        \n        <SidePanel\n          controlFlags={controlFlags}\n          controlMethods={controlMethods}\n          dataStructure={dataStructure} />\n        \n        <DashboardContent\n          cards={cards}\n          cardMethods={cardMethods}\n          controlFlags={controlFlags}\n          controlMethods={controlMethods}\n          data={data} />\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}